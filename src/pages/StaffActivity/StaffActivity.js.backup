import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Typography,
  Paper,
  Grid,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Card,
  CardContent,
  Chip,
  Avatar,
  IconButton,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tab,
  Tabs,
  Divider,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Snackbar,
  Alert,
  CircularProgress,
  OutlinedInput,
  Stack
} from '@mui/material';
import {
  Search as SearchIcon,
  Visibility as VisibilityIcon,
  CalendarToday as CalendarIcon,
  Person as PersonIcon,
  LocationOn as LocationIcon,
  Store as StoreIcon,
  Fingerprint as FingerprintIcon,
  FilterAlt as FilterAltIcon,
  FileDownload as FileDownloadIcon,
  Delete as DeleteIcon
} from '@mui/icons-material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { useAuth } from '../../contexts/AuthContext';
import { marketingStaffActivityService, staffService, staffActivityService, distributorService } from '../../services/api';
import { format } from 'date-fns';
import StaffActivityDetail from './StaffActivityDetail';
// Pagination handled internally

function StaffActivity() {
  const { role } = useAuth();
  const [loading, setLoading] = useState(true);
  const [activities, setActivities] = useState([]);
  const [selectedActivity, setSelectedActivity] = useState(null);
  const [detailsDialogOpen, setDetailsDialogOpen] = useState(false);
  const [staff, setStaff] = useState([]);
  const [distributors, setDistributors] = useState([]);
  const [filters, setFilters] = useState({
    staffId: '',
    staffType: '',
    distributorId: '',
    fromDate: null,
    toDate: null,
    status: '',
    distributorName: '',
    searchQuery: ''
  });
  const [activeTab, setActiveTab] = useState(0);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success'
  });
  const [initialLoadComplete, setInitialLoadComplete] = useState(false);
  const [showDetailView, setShowDetailView] = useState(false);
  const [selectedStaffId, setSelectedStaffId] = useState(null);
  const [selectedDistributor, setSelectedDistributor] = useState(null);
  
  // Pagination state
  const [page, setPage] = useState(0);
  const [totalItems, setTotalItems] = useState(0);

  // Staff types available
  const staffTypes = [
    { value: 'Marketing Staff', label: 'Marketing Staff' },
    { value: 'Godown Incharge', label: 'Godown Incharge' },
    { value: 'Mid-Level Manager', label: 'Mid-Level Manager'}
  ];

  // Initial load of staff data
  useEffect(() => {
    fetchAllStaff();
  }, []);

  // Fetch staff when staff type changes
  useEffect(() => {
    if (initialLoadComplete) {
      fetchStaff();
    }
  }, [filters.staffType, initialLoadComplete]);

  // Fetch activities when filter is applied (not on initial load)
  const fetchInitialData = async () => {
    try {
      setLoading(true);
      // Load recent marketing staff activities by default
      const response = await marketingStaffActivityService.getAllActivities(
        null, // staffId
        null, // distributorId
        null, // fromDate
        null, // toDate
        null, // status
        1,    // page
        10    // limit
      );
      
      if (response && response.success) {
        setActivities(response.data);
        setTotalItems(response.count || 0);
      } else {
        setActivities([]);
        setTotalItems(0);
      }
    } catch (error) {
      console.error("Error in initial data fetch:", error);
      setSnackbar({
        open: true,
        message: 'Failed to load initial data. Please try again later.',
        severity: 'error'
      });
      setActivities([]);
      setTotalItems(0);
    } finally {
      setLoading(false);
    }
  };

  const fetchAllStaff = async () => {
    try {
      setLoading(true);
      // Fetch all staff first to populate the dropdown
      const staffResponse = await staffService.getAllStaff(1, 100);
      if (staffResponse && staffResponse.success) {
        setStaff(staffResponse.data);
      }
      
      // Fetch all distributors for the filter dropdown
      const distributorsResponse = await distributorService.getAllDistributors();
      if (distributorsResponse && distributorsResponse.success) {
        setDistributors(distributorsResponse.data);
      }
      
      setInitialLoadComplete(true);
      await fetchInitialData();
    } catch (error) {
      console.error("Error fetching all staff:", error);
      setSnackbar({
        open: true,
        message: 'Failed to load staff data. Please try again later.',
        severity: 'error'
      });
      setLoading(false);
    }
  };

  const fetchStaff = async () => {
    if (!filters.staffType) return;
    
    try {
      setLoading(true);
      
      // Fetch staff based on staff type filter
      const staffResponse = await staffService.getAllStaff(1, 100, filters.staffType);
      if (staffResponse && staffResponse.success) {
        setStaff(staffResponse.data);
      }
    } catch (error) {
      console.error("Error fetching staff:", error);
      setSnackbar({
        open: true,
        message: 'Failed to load staff data. Please try again later.',
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  // Fetch activities based on filters
  const fetchActivities = async () => {
    try {
      setLoading(true);
      
      const { staffId, staffType, distributorId, fromDate, toDate, status } = filters;
      const formattedFromDate = fromDate ? format(fromDate, 'yyyy-MM-dd') : null;
      const formattedToDate = toDate ? format(toDate, 'yyyy-MM-dd') : null;
      
      // Calculate pagination parameters
      const currentPage = page + 1; // API uses 1-based indexing
      const pageSize = 10; // Fixed at 10 records per page
      
      console.log(`Fetching activities for page ${currentPage}`);
      
      // Use the appropriate service based on staff type
      let response;
      if (staffType === 'Marketing Staff' || !staffType) {
        // Default to marketing staff activities if no staff type is selected
        response = await marketingStaffActivityService.getAllActivities(
          staffId || null,
          distributorId || null,
          formattedFromDate || null,
          formattedToDate || null,
          status || null,
          currentPage,
          pageSize
        );
      } else {
        // Use generic staff activity service for other staff types
        response = await staffActivityService.getAllActivities({
          staffId: staffId || null,
          staffType: staffType || null,
          distributorId: distributorId || null,
          fromDate: formattedFromDate || null,
          toDate: formattedToDate || null,
          status: status || null,
          page: currentPage,
          limit: pageSize
        });
      }
      
      if (response && response.success) {
        setActivities(response.data);
        setTotalItems(response.count || 0);
        
        // If we got fewer results than expected and we're not on page 1,
        // it might mean we're on a page that no longer exists (e.g., after filtering)
        if (response.data.length === 0 && currentPage > 1) {
          // Go back to page 1
          setPage(0);
          setTimeout(() => fetchActivities(), 0);
          return;
        }
      }
    } catch (error) {
      console.error("Error fetching activities:", error);
      setSnackbar({
        open: true,
        message: 'Failed to load activities. Please try again later.',
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  // Handle filter changes
  const handleFilterChange = (name, value) => {
    setFilters({
      ...filters,
      [name]: value
    });
    
    // If changing staff type, reset staff ID
    if (name === 'staffType') {
      setFilters(prev => ({
        ...prev,
        staffId: '',
        [name]: value
      }));
    }
  };

  // Apply filters
  const applyFilters = () => {
    setPage(0); // Reset to first page when applying filters
    fetchActivities();
  };

  // Reset filters
  const resetFilters = () => {
    setFilters({
      staffId: '',
      staffType: '',
      distributorId: '',
      fromDate: null,
      toDate: null,
      status: ''
    });
    setPage(0);
    
    // Reload activities with default settings
    setTimeout(() => {
      fetchActivities();
    }, 0);
  };

  // Handle page change
  const handleChangePage = (newPage) => {
    // Ensure page is not negative
    const validPage = Math.max(0, newPage);
    setPage(validPage);
    // Need to update filters with the new page before fetching
    setTimeout(() => {
      fetchActivities();
    }, 0);
  };

  // Handle tab change
  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
    
    // Filter activities based on tab
    let status = '';
    switch (newValue) {
      case 1:
        status = 'Punched In';
        break;
      case 2:
        status = 'Punched Out';
        break;
      default:
        status = '';
    }
    
    handleFilterChange('status', status);
  };

  // Handle view details
  const handleViewDetails = (activity) => {
    setSelectedActivity(activity);
    setSelectedStaffId(activity.marketingStaffId?._id || activity.marketingStaffId || activity.staffId?._id || activity.staffId);
    
    // Pass distributorId if available, otherwise fall back to distributor name
    if (activity.distributorId) {
      setSelectedDistributor(typeof activity.distributorId === 'object' ? activity.distributorId._id : activity.distributorId);
    } else {
      setSelectedDistributor(activity.distributor);
    }
    
    setShowDetailView(true);
  };

  // Handle delete activity
  const handleDeleteActivity = async (activityId) => {
    if (!window.confirm('Are you sure you want to delete this activity? This action cannot be undone.')) {
      return;
    }

    try {
      setLoading(true);
      const response = await marketingStaffActivityService.deleteActivity(activityId);
      
      if (response && response.success) {
        setSnackbar({
          open: true,
          message: 'Activity deleted successfully',
          severity: 'success'
        });
        
        // Refresh the activities list
        fetchActivities();
      } else {
        setSnackbar({
          open: true,
          message: response?.error || 'Failed to delete activity',
          severity: 'error'
        });
      }
    } catch (error) {
      console.error('Error deleting activity:', error);
      setSnackbar({
        open: true,
        message: 'Error deleting activity. Please try again.',
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  // Handle close details dialog
  const handleCloseDetailsDialog = () => {
    setDetailsDialogOpen(false);
  };

  // Handle snackbar close
  const handleSnackbarClose = () => {
    setSnackbar({
      ...snackbar,
      open: false
    });
  };

  // Add CSV export function
  const handleExportCSV = () => {
    if (activities.length === 0) {
      setSnackbar({
        open: true,
        message: 'No data available to export',
        severity: 'warning'
      });
      return;
    }

    const csvData = [
      // Headers
      ['Staff Name', 'Staff Type', 'Location', 'Date & Time', 'Status', 'Distributor', 'Area', 
       'Punch In Time', 'Punch Out Time', 'Duration', 'Notes']
    ];

    // Add data rows
    activities.forEach(activity => {
      const startTime = activity.meetingStartTime || activity.startTime || activity.createdAt;
      const endTime = activity.meetingEndTime || activity.endTime;
      
      csvData.push([
        activity.staffId?.name || activity.marketingStaffId?.name || 'N/A',
        filters.staffType || 'All',
        activity.location || activity.areaName || 'N/A',
        new Date(activity.createdAt).toLocaleString(),
        activity.status,
        activity.distributor || 'N/A',
        activity.areaName || 'N/A',
        startTime ? new Date(startTime).toLocaleString() : 'N/A',
        endTime ? new Date(endTime).toLocaleString() : 'N/A',
        endTime ? calculateDuration(startTime, endTime) : 'N/A',
        activity.notes || 'N/A'
      ]);
    });

    // Convert to CSV string
    const csvContent = csvData.map(row => row.join(',')).join('\n');
    
    // Create and trigger download
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', `staff_activities_${new Date().toISOString().split('T')[0]}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Render activity table
  const renderActivityTable = () => {
    if (loading) {
      return (
        <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
          <CircularProgress />
        </Box>
      );
    }

    if (activities.length === 0) {
      return (
        <Paper sx={{ p: 3, textAlign: 'center' }}>
          <Typography variant="body1">
            No activities found matching your criteria.
          </Typography>
        </Paper>
      );
    }

    // Determine which columns to show based on staff type
    const isMarketingStaff = filters.staffType === 'Marketing Staff';

    return (
      <>
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Image</TableCell>
                <TableCell>Staff Name</TableCell>
                {isMarketingStaff && <TableCell>Distributor</TableCell>}
                <TableCell>Location</TableCell>
                <TableCell>Shops Visited</TableCell>
                <TableCell>Sales Orders</TableCell>
                <TableCell>Date & Time</TableCell>
                <TableCell>Status</TableCell>
                <TableCell align="center">Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {activities.map((activity) => (
                <TableRow key={activity._id} hover>
                  <TableCell>
                    {activity.selfieImage ? (
                      <img
                        src={activity.selfieImage.startsWith('http') ? activity.selfieImage : `${process.env.REACT_APP_API_BASE_URL}${activity.selfieImage}`}
                        alt="Activity"
                        style={{ width: 48, height: 48, objectFit: 'cover', borderRadius: 4, cursor: 'pointer', border: '1px solid #eee' }}
                        onClick={() => window.open(activity.selfieImage.startsWith('http') ? activity.selfieImage : `${process.env.REACT_APP_API_BASE_URL}${activity.selfieImage}`, '_blank')}
                      />
                    ) : (
                      <Typography variant="caption" color="textSecondary">
                        No Image
                      </Typography>
                    )}
                  </TableCell>
                  <TableCell>
                    {activity.staffId?.name || activity.marketingStaffId?.name || 'N/A'}
                  </TableCell>
                  {isMarketingStaff && (
                    <TableCell>
                      {activity.distributorId?.name || activity.distributor || 'N/A'}
                    </TableCell>
                  )}
                  <TableCell>{activity.location || activity.areaName || 'N/A'}</TableCell>
                  <TableCell>
                    {activity.totalShopsVisited > 0 ? (
                      <Chip 
                        label={`${activity.totalShopsVisited} shops`} 
                        size="small" 
                        color="primary" 
                        variant="outlined" 
                      />
                    ) : (
                      'N/A'
                    )}
                  </TableCell>
                  <TableCell>
                    {activity.totalSalesOrders > 0 ? (
                      <Box>
                        <Chip 
                          label={`${activity.totalSalesOrders} orders`} 
                          size="small" 
                          color="success" 
                          variant="outlined" 
                        />
                        {activity.totalSalesValue > 0 && (
                          <Typography variant="caption" display="block" color="text.secondary">
                            ₹{activity.totalSalesValue.toLocaleString()}
                          </Typography>
                        )}
                      </Box>
                    ) : (
                      'N/A'
                    )}
                  </TableCell>
                  <TableCell>
                    {new Date(activity.createdAt).toLocaleString('en-US', {
                      year: 'numeric',
                      month: 'short',
                      day: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </TableCell>
                  <TableCell>
                    <Chip 
                      label={activity.status}
                      color={
                        activity.status === 'Punched In' 
                          ? 'primary' 
                          : activity.status === 'Punched Out' 
                            ? 'success' 
                            : 'default'
                      }
                      size="small"
                    />
                  </TableCell>
                  <TableCell align="center">
                    <Box sx={{ display: 'flex', gap: 1, justifyContent: 'center' }}>
                      <IconButton
                        size="small"
                        onClick={() => handleViewDetails(activity)}
                        color="primary"
                        title="View Details"
                      >
                        <VisibilityIcon />
                      </IconButton>
                      <IconButton
                        size="small"
                        onClick={() => handleDeleteActivity(activity._id)}
                        color="error"
                        title="Delete Activity"
                      >
                        <DeleteIcon />
                      </IconButton>
                    </Box>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
        
        <Box sx={{ display: 'flex', justifyContent: 'center', pt: 2, pb: 2 }}>
          {totalItems > 0 ? (
            <>
              <Button
                variant="outlined"
                color="primary"
                disabled={page === 0}
                onClick={() => handleChangePage(page - 1)}
                sx={{ mx: 1 }}
                startIcon={<span>&#8592;</span>}
              >
                Previous
              </Button>
              <Box sx={{ display: 'flex', alignItems: 'center', mx: 2 }}>
                <Typography variant="body1">
                  Page {page + 1} of {Math.max(1, Math.ceil(totalItems / 10))}
                </Typography>
              </Box>
              <Button
                variant="outlined"
                color="primary"
                disabled={page >= Math.ceil(totalItems / 10) - 1}
                onClick={() => handleChangePage(page + 1)}
                sx={{ mx: 1 }}
                endIcon={<span>&#8594;</span>}
              >
                Next
              </Button>
            </>
          ) : (
            <Typography variant="body2" color="text.secondary">
              {loading ? 'Loading...' : 'No records to display'}
            </Typography>
          )}
        </Box>
      </>
    );
  };

  // Render marketing staff activity details
  const renderMarketingStaffDetails = () => {
    if (!selectedActivity) return null;

    return (
      <Grid container spacing={3}>
        <Grid item xs={12} md={6}>
          <Card variant="outlined" sx={{ height: '100%' }}>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <PersonIcon color="primary" sx={{ mr: 1 }} />
                <Typography variant="h6">Staff Information</Typography>
              </Box>
              <Typography variant="body1" gutterBottom>
                <strong>Name:</strong> {selectedActivity.marketingStaffId?.name || 'N/A'}
              </Typography>
              <Typography variant="body1" gutterBottom>
                <strong>Email:</strong> {selectedActivity.marketingStaffId?.email || 'N/A'}
              </Typography>
              <Typography variant="body1" gutterBottom>
                <strong>Status:</strong> 
                <Chip 
                  label={selectedActivity.status}
                  color={
                    selectedActivity.status === 'Punched In' 
                      ? 'primary' 
                      : selectedActivity.status === 'Punched Out' 
                        ? 'success' 
                        : 'default'
                  }
                  size="small"
                  sx={{ ml: 1 }}
                />
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12} md={6}>
          <Card variant="outlined" sx={{ height: '100%' }}>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <CalendarIcon color="primary" sx={{ mr: 1 }} />
                <Typography variant="h6">Timing Details</Typography>
              </Box>
              <Typography variant="body1" gutterBottom>
                <strong>Punch In:</strong> {new Date(selectedActivity.meetingStartTime || selectedActivity.createdAt).toLocaleString()}
              </Typography>
              {selectedActivity.meetingEndTime && (
                <Typography variant="body1" gutterBottom>
                  <strong>Punch Out:</strong> {new Date(selectedActivity.meetingEndTime).toLocaleString()}
                </Typography>
              )}
              <Typography variant="body1" gutterBottom>
                <strong>Duration:</strong> {
                  selectedActivity.meetingEndTime
                    ? calculateDuration(selectedActivity.meetingStartTime || selectedActivity.createdAt, selectedActivity.meetingEndTime)
                    : 'Still active'
                }
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12}>
          <Card variant="outlined">
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <LocationIcon color="primary" sx={{ mr: 1 }} />
                <Typography variant="h6">Location Information</Typography>
              </Box>
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6}>
                  <Typography variant="body1" gutterBottom>
                    <strong>Distributor:</strong> {selectedActivity.distributor}
                  </Typography>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Typography variant="body1" gutterBottom>
                    <strong>Retail Shop:</strong> {selectedActivity.retailShop}
                  </Typography>
                </Grid>
                <Grid item xs={12}>
                  <Typography variant="body1" gutterBottom>
                    <strong>Area:</strong> {selectedActivity.areaName}
                  </Typography>
                </Grid>
                {selectedActivity.tripCompanion && (
                  <Grid item xs={12} sm={6}>
                    <Typography variant="body1" gutterBottom>
                      <strong>Trip Companion:</strong> {selectedActivity.tripCompanion.name} ({selectedActivity.tripCompanion.category})
                    </Typography>
                  </Grid>
                )}
                <Grid item xs={12} sm={6}>
                  <Typography variant="body1" gutterBottom>
                    <strong>Mode of Transport:</strong> {selectedActivity.modeOfTransport}
                  </Typography>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>
        
        {selectedActivity.shops && selectedActivity.shops.length > 0 && (
          <Grid item xs={12}>
            <Card variant="outlined">
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <StoreIcon color="primary" sx={{ mr: 1 }} />
                  <Typography variant="h6">Shop Information</Typography>
                </Box>
                {selectedActivity.shopTypes && (
                  <Box sx={{ mb: 2 }}>
                    <Typography variant="subtitle1" gutterBottom>
                      Shop Types:
                    </Typography>
                    <Box sx={{ display: 'flex', gap: 1 }}>
                      {selectedActivity.shopTypes.map((type, index) => (
                        <Chip key={index} label={type} size="small" variant="outlined" />
                      ))}
                    </Box>
                  </Box>
                )}
                
                <Typography variant="subtitle1" gutterBottom>
                  Shops Visited:
                </Typography>
                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                  {selectedActivity.shops.map((shop, index) => (
                    <Chip 
                      key={index} 
                      label={`${shop.name} (${shop.type})`}
                      variant="outlined"
                      size="small"
                    />
                  ))}
                </Box>
              </CardContent>
            </Card>
          </Grid>
        )}
        
        {selectedActivity.selfieImage && (
          <Grid item xs={12}>
            <Card variant="outlined">
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <FingerprintIcon color="primary" sx={{ mr: 1 }} />
                  <Typography variant="h6">Selfie</Typography>
                </Box>
                <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                  <img 
                    src={selectedActivity.selfieImage.startsWith('http') 
                      ? selectedActivity.selfieImage 
                      : `${process.env.REACT_APP_API_BASE_URL}${selectedActivity.selfieImage}`
                    } 
                    alt="Staff Selfie"
                    style={{ maxWidth: '100%', maxHeight: '300px', borderRadius: '8px' }}
                  />
                </Box>
              </CardContent>
            </Card>
          </Grid>
        )}
      </Grid>
    );
  };

  // Render generic staff activity details
  const renderGenericStaffDetails = () => {
    if (!selectedActivity) return null;

    return (
      <Grid container spacing={3}>
        <Grid item xs={12} md={6}>
          <Card variant="outlined" sx={{ height: '100%' }}>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <PersonIcon color="primary" sx={{ mr: 1 }} />
                <Typography variant="h6">Staff Information</Typography>
              </Box>
              <Typography variant="body1" gutterBottom>
                <strong>Name:</strong> {selectedActivity.staffId?.name || 'N/A'}
              </Typography>
              <Typography variant="body1" gutterBottom>
                <strong>Email:</strong> {selectedActivity.staffId?.email || 'N/A'}
              </Typography>
              <Typography variant="body1" gutterBottom>
                <strong>Role:</strong> {selectedActivity.staffType || 'N/A'}
              </Typography>
              <Typography variant="body1" gutterBottom>
                <strong>Status:</strong> 
                <Chip 
                  label={selectedActivity.status}
                  color={
                    selectedActivity.status === 'Punched In' 
                      ? 'primary' 
                      : selectedActivity.status === 'Punched Out' 
                        ? 'success' 
                        : 'default'
                  }
                  size="small"
                  sx={{ ml: 1 }}
                />
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12} md={6}>
          <Card variant="outlined" sx={{ height: '100%' }}>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <CalendarIcon color="primary" sx={{ mr: 1 }} />
                <Typography variant="h6">Timing Details</Typography>
              </Box>
              <Typography variant="body1" gutterBottom>
                <strong>Punch In:</strong> {new Date(selectedActivity.startTime || selectedActivity.createdAt).toLocaleString()}
              </Typography>
              {selectedActivity.endTime && (
                <Typography variant="body1" gutterBottom>
                  <strong>Punch Out:</strong> {new Date(selectedActivity.endTime).toLocaleString()}
                </Typography>
              )}
              <Typography variant="body1" gutterBottom>
                <strong>Duration:</strong> {
                  selectedActivity.endTime
                    ? calculateDuration(selectedActivity.startTime || selectedActivity.createdAt, selectedActivity.endTime)
                    : 'Still active'
                }
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12}>
          <Card variant="outlined">
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <LocationIcon color="primary" sx={{ mr: 1 }} />
                <Typography variant="h6">Activity Information</Typography>
              </Box>
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <Typography variant="body1" gutterBottom>
                    <strong>Location:</strong> {selectedActivity.location || 'Not specified'}
                  </Typography>
                </Grid>
                {selectedActivity.department && (
                  <Grid item xs={12} sm={6}>
                    <Typography variant="body1" gutterBottom>
                      <strong>Department:</strong> {selectedActivity.department}
                    </Typography>
                  </Grid>
                )}
                {selectedActivity.taskType && (
                  <Grid item xs={12} sm={6}>
                    <Typography variant="body1" gutterBottom>
                      <strong>Task Type:</strong> {selectedActivity.taskType}
                    </Typography>
                  </Grid>
                )}
                {selectedActivity.notes && (
                  <Grid item xs={12}>
                    <Typography variant="body1" gutterBottom>
                      <strong>Notes:</strong> {selectedActivity.notes}
                    </Typography>
                  </Grid>
                )}
              </Grid>
            </CardContent>
          </Card>
        </Grid>
        
        {selectedActivity.image && (
          <Grid item xs={12}>
            <Card variant="outlined">
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <FingerprintIcon color="primary" sx={{ mr: 1 }} />
                  <Typography variant="h6">Activity Image</Typography>
                </Box>
                <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                  <img 
                    src={selectedActivity.image.startsWith('http') 
                      ? selectedActivity.image 
                      : `${process.env.REACT_APP_API_BASE_URL}${selectedActivity.image}`
                    } 
                    alt="Activity Image"
                    style={{ maxWidth: '100%', maxHeight: '300px', borderRadius: '8px' }}
                  />
                </Box>
              </CardContent>
            </Card>
          </Grid>
        )}
      </Grid>
    );
  };

  // Render details dialog
  const renderDetailsDialog = () => {
    if (!selectedActivity) return null;

    // Determine if this is a marketing staff activity
    const isMarketingStaff = selectedActivity.marketingStaffId || filters.staffType === 'Marketing Staff';

    return (
      <Dialog 
        open={detailsDialogOpen} 
        onClose={handleCloseDetailsDialog}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          {isMarketingStaff ? 'Marketing Staff Activity Details' : 'Staff Activity Details'}
        </DialogTitle>
        <DialogContent dividers>
          {isMarketingStaff ? renderMarketingStaffDetails() : renderGenericStaffDetails()}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDetailsDialog}>Close</Button>
        </DialogActions>
      </Dialog>
    );
  };

  // Helper function to calculate duration
  const calculateDuration = (startTime, endTime) => {
    const start = new Date(startTime);
    const end = new Date(endTime);
    const diffMs = end - start;
    
    const diffHrs = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMins = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    
    return `${diffHrs} hrs ${diffMins} mins`;
  };

  // Add a function to go back to the list view
  const handleBackToList = () => {
    setShowDetailView(false);
    setSelectedActivity(null);
    setSelectedStaffId(null);
    setSelectedDistributor(null);
  };

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      {showDetailView ? (
        <>
          <Box sx={{ mb: 2 }}>
            <Button variant="outlined" onClick={handleBackToList}>
              Back to List
            </Button>
          </Box>
          <StaffActivityDetail 
            staffId={selectedStaffId} 
            distributorId={selectedDistributor}
            activityId={selectedActivity ? selectedActivity._id : null}
          />
        </>
      ) : (
        <>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
            <Typography variant="h4" gutterBottom>
              Staff Activity
            </Typography>
            <Button
              variant="outlined"
              startIcon={<FileDownloadIcon />}
              onClick={handleExportCSV}
              disabled={activities.length === 0}
            >
              Export to CSV
            </Button>
          </Box>
          
          <Paper sx={{ p: 3, mb: 3 }}>
            <Grid container spacing={3} alignItems="center">
              <Grid item xs={12} sm={6} md={3}>
                <FormControl fullWidth size="medium" sx={{ mb: 2 }}>
                  <InputLabel id="staff-type-label">Staff Type</InputLabel>
                  <Select
                    labelId="staff-type-label"
                    id="staff-type"
                    value={filters.staffType}
                    label="Staff Type"
                    onChange={(e) => handleFilterChange('staffType', e.target.value)}
                  >
                    <MenuItem value="">All Types</MenuItem>
                    {staffTypes.map((type) => (
                      <MenuItem key={type.value} value={type.value}>
                        {type.label}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12} sm={6} md={3}>
                <FormControl fullWidth size="medium" sx={{ mb: 2 }}>
                  <InputLabel id="staff-label">Staff</InputLabel>
                  <Select
                    labelId="staff-label"
                    id="staff"
                    value={filters.staffId}
                    label="Staff"
                    onChange={(e) => handleFilterChange('staffId', e.target.value)}
                  >
                    <MenuItem value="">All Staff</MenuItem>
                    {staff.map((s) => (
                      <MenuItem key={s._id} value={s._id}>
                        {s.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12} sm={6} md={3}>
                <FormControl fullWidth size="medium" sx={{ mb: 2 }}>
                  <InputLabel id="distributor-label">Distributor</InputLabel>
                  <Select
                    labelId="distributor-label"
                    id="distributor"
                    value={filters.distributorId}
                    label="Distributor"
                    onChange={(e) => handleFilterChange('distributorId', e.target.value)}
                  >
                    <MenuItem value="">All Distributors</MenuItem>
                    {distributors.map((distributor) => (
                      <MenuItem key={distributor._id} value={distributor._id}>
                        {distributor.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12} sm={6} md={3}>
                <Box sx={{ mb: 2 }}>
                  <LocalizationProvider dateAdapter={AdapterDateFns}>
                    <DatePicker
                      label="From Date"
                      value={filters.fromDate}
                      onChange={(newDate) => handleFilterChange('fromDate', newDate)}
                      slotProps={{
                        textField: {
                          fullWidth: true,
                          size: "medium"
                        }
                      }}
                    />
                  </LocalizationProvider>
                </Box>
              </Grid>
              
              <Grid item xs={12} sm={6} md={3}>
                <Box sx={{ mb: 2 }}>
                  <LocalizationProvider dateAdapter={AdapterDateFns}>
                    <DatePicker
                      label="To Date"
                      value={filters.toDate}
                      onChange={(newDate) => handleFilterChange('toDate', newDate)}
                      slotProps={{
                        textField: {
                          fullWidth: true,
                          size: "medium"
                        }
                      }}
                    />
                  </LocalizationProvider>
                </Box>
              </Grid>
              
              <Grid item xs={12} sm={6} md={3}>
                <FormControl fullWidth size="medium" sx={{ mb: 2 }}>
                  <InputLabel id="status-label">Status</InputLabel>
                  <Select
                    labelId="status-label"
                    id="status"
                    value={filters.status}
                    label="Status"
                    onChange={(e) => handleFilterChange('status', e.target.value)}
                  >
                    <MenuItem value="">All Statuses</MenuItem>
                    <MenuItem value="Punched In">Punched In</MenuItem>
                    <MenuItem value="Punched Out">Punched Out</MenuItem>
                    <MenuItem value="Completed">Completed</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12} sx={{ display: 'flex', justifyContent: { xs: 'center', md: 'flex-start' }, mt: 1 }}>
                <Button 
                  variant="contained" 
                  color="primary"
                  onClick={applyFilters}
                  startIcon={<FilterAltIcon />}
                  sx={{ mr: 2, py: 1, px: 3, fontSize: '1rem' }}
                >
                  Apply Filters
                </Button>
                <Button 
                  variant="outlined"
                  onClick={resetFilters}
                  sx={{ py: 1, px: 3, fontSize: '1rem' }}
                >
                  Reset
                </Button>
              </Grid>
            </Grid>
          </Paper>
          
          <Paper sx={{ p: 2 }}>
        <Tabs 
          value={activeTab} 
          onChange={handleTabChange} 
          indicatorColor="primary"
          textColor="primary"
              sx={{ mb: 2 }}
        >
              <Tab label="All" />
              <Tab label="Punched In" />
              <Tab label="Punched Out" />
        </Tabs>
            
            {loading ? (
              <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
                <CircularProgress />
      </Box>
            ) : (
              renderActivityTable()
            )}
          </Paper>
      
      {renderDetailsDialog()}
      
      <Snackbar 
        open={snackbar.open} 
        autoHideDuration={6000} 
        onClose={handleSnackbarClose}
      >
        <Alert onClose={handleSnackbarClose} severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
        </>
      )}
    </Container>
  );
}

export default StaffActivity;